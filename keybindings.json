// Place your key bindings in this file to overwrite the defaults
[
  {
    "command": "gotoLastEdit.goBack",
    "key": "alt+down",
    "when": "editorTextFocus"
  },
  {
    "command": "-gotoLastEdit.goBack",
    "key": "ctrl+-",
    "when": "editorTextFocus"
  },
  {
    "command": "gotoLastEdit.goForward",
    "key": "alt+up",
    "when": "editorTextFocus"
  },
  {
    "command": "-gotoLastEdit.goForward",
    "key": "ctrl+shift+0",
    "when": "editorTextFocus"
  },
  {
    "command": "workbench.action.toggleMaximizedPanel",
    "key": "ctrl+k t"
  },
  {
    "command": "workbench.action.navigateBack",
    "key": "alt+left"
  },
  {
    "command": "-workbench.action.navigateBack",
    "key": "ctrl+alt+-"
  },
  {
    "command": "workbench.action.navigateForward",
    "key": "alt+right"
  },
  {
    "command": "-workbench.action.navigateForward",
    "key": "ctrl+shift+-"
  },
  {
    "command": "markdown.extension.togglePreview",
    "key": "ctrl+shift+v",
    "when": "!terminalFocus && editorLangId == 'markdown'"
  },
  {
    "command": "-markdown.extension.togglePreview",
    "key": "ctrl+shift+v",
    "when": "!terminalFocus"
  },
  {
    "command": "markdown.extension.togglePreviewToSide",
    "key": "ctrl+k v",
    "when": "!terminalFocus && editorLangId == 'markdown'"
  },
  {
    "command": "-markdown.extension.togglePreviewToSide",
    "key": "ctrl+k v",
    "when": "!terminalFocus"
  },
  {
    "command": "workbench.action.tasks.reRunTask",
    "key": "ctrl+f9"
  },
  {
    "command": "editor.action.moveSelectionToPreviousFindMatch",
    "key": "shift+alt+d"
  },
  {
    // Mmnemonic: window -> split
    "command": "workbench.action.splitEditorDown",
    "key": "space w s",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // Mmnemonic: window -> vertical split
    "command": "workbench.action.splitEditorRight",
    "key": "space w v",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // TODO: further split and group handling
  // {
  //   "command": "-workbench.action.splitEditorRight",
  //   //"key": "ctrl+k ctrl+oem_5"
  //   "key": "ctrl+k ctrl+oem_5"
  // },
  // {
  //   "command": "-workbench.action.splitEditorDown",
  //   "key": "ctrl+k ctrl+oem_5"
  // },
  // {
  //   "command": "workbench.action.joinEditorInGroup",
  //   "key": "ctrl+k 1",
  //   "when": "sideBySideEditorActive"
  // },
  // {
  //   "command": "-workbench.action.joinEditorInGroup",
  //   "key": "ctrl+k ctrl+shift+oem_5",
  //   "when": "sideBySideEditorActive"
  // },
  // {
  //   "command": "workbench.action.joinAllGroups",
  //   "key": "ctrl+k 0"
  // },
  // {
  //   "command": "workbench.action.focusNextGroup",
  //   "key": "ctrl+k o",
  //   "when": "editorFocus"
  // },
  {
    // Go to previous entry in auto complete list
    // Mnemonic: previous
    // this keybinding is used widely among different tools
    "command": "selectPrevSuggestion",
    "key": "ctrl+p",
    "when": "editorTextFocus && suggestWidgetVisible"
  },
  {
    // Go to next entry in auto complete list
    // Mnemonic: next
    // this keybinding is used widely among different tools
    "command": "selectNextSuggestion",
    "key": "ctrl+n",
    "when": "editorTextFocus && suggestWidgetVisible"
  },
  {
    // Go to previous entry in find-file or run command lists or similar
    // Mnemonic: previous
    // this keybinding is used widely among different tools
    "command": "workbench.action.quickOpenSelectPrevious",
    "key": "ctrl+p",
    "when": "inQuickOpen"
  },
  {
    // Go to next entry in find-file or run command lists or similar
    // Mnemonic: next
    // this keybinding is used widely among different tools
    "command": "workbench.action.quickOpenSelectNext",
    "key": "ctrl+n",
    "when": "inQuickOpen"
  },
  {
    // Multi-selection of identical words.
    // We have to remove <CTRL-D> as this is also a VIM keybinding
    "key": "ctrl+d",
    "command": "-editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    // Multi-selection of identical words.
    // Note: Modifier keys come in handy here as they don't need to be
    // pressed multiple times for repeated command execution.
    "key": "alt+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  // Navigation
  {
    // Move one split (window) left
    "command": "workbench.action.navigateLeft",
    "key": "ctrl-h"
  },
  {
    // Move one split (window) down
    "command": "workbench.action.navigateDown",
    "key": "ctrl-j"
  },
  {
    // Move one split (window) up
    "command": "workbench.action.navigateUp",
    "key": "ctrl-k"
  },
  {
    // Move one split (window) right
    "command": "workbench.action.navigateRight",
    "key": "ctrl-l"
  },
  {
    // Show tab names in fuzzy finder list
    "command": "workbench.action.showAllEditors",
    "key": "space ,",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // Show sidebar and focus file explorer -- when not already in sidebar
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "command": "runCommands",
    "key": "space e",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
  },
  {
    // Hide sidebar and focus editor -- when already in sidebar
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "command": "runCommands",
    "key": "space e",
    "when": "vim.mode != 'Disabled' && sideBarFocus && !inputFocus"
  },
  {
    // Hide sidebar and focus editor -- when sidebar already visible and in editor
    "command": "workbench.action.toggleSidebarVisibility",
    "key": "space e",
    "when": "vim.mode == 'Normal' && editorTextFocus && foldersViewVisible"
  },
  {
    // Focus tab to the left (in same group / split)
    "command": "workbench.action.previousEditorInGroup",
    "key": "shift-h",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  {
    // Focus tab to the right (in same group / split)
    "command": "workbench.action.nextEditorInGroup",
    "key": "shift-l",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  {
    // when editor is in preview mode, tell it to (k)eep open
    "command": "workbench.action.keepEditor",
    "key": "space k",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  // ------------------------------------------
  // Coding
  // ------------------------------------------
  // {
  //   "key": "shift-j",
  //   "command": "editor.action.moveLinesDownAction",
  //   "when": "vim.mode == 'VisualLine' && editorTextFocus"
  // },
  // {
  //   "key": "shift-k",
  //   "command": "editor.action.moveLinesUpAction",
  //   "when": "vim.mode == 'VisualLine' && editorTextFocus"
  // },
  {
    // Show the tooltip for the symbol under the cursor
    "command": "editor.action.showHover",
    "key": "shift-k",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // Trigger code action selection (lightbulb)
    "command": "editor.action.codeAction",
    "key": "space c a",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // Rename symbol under cursor
    "command": "editor.action.rename",
    "key": "space c r",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // Allows selection of a symbol of current file in fuzzy finder in order to jump to it
    "command": "workbench.action.gotoSymbol",
    "key": "space c s",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // Closes the current active tab (like "buffer-delete")
    "command": "workbench.action.closeActiveEditor",
    "key": "space b d",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // Closes other tabs (other buffers)
    "command": "workbench.action.closeOtherEditors",
    "key": "space b o",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // Closes all tabs (all buffers)
    "command": "workbench.action.closeAllEditors",
    "key": "space b a",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // file -> find: Search file with fuzzy finder
    "command": "workbench.action.quickOpen",
    "key": "space f f",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // file -> open
    "command": "workbench.action.files.openFile",
    "key": "space f o",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // file -> recent
    // open most recent files or workspaces in fuzzy finder
    "command": "workbench.action.openRecent",
    "key": "space f r",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // format the current document
    "command": "editor.action.formatDocument",
    "key": "space c f",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock') && (editorTextFocus || !inputFocus)"
  },
  {
    // format changes made to the document
    "command": "editor.action.formatSelection",
    "key": "space c g",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock') && (editorTextFocus || !inputFocus)"
  },
  {
    // alias for find-file
    "command": "workbench.action.quickOpen",
    "key": "space space",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // goto definition
    "command": "editor.action.revealDefinition",
    "key": "space g d",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // goto references
    "command": "editor.action.goToReferences",
    "key": "space g r",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    // search in all files (global full text search)
    "command": "workbench.action.findInFiles",
    "key": "space s g", // "search globally"
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock') && (editorTextFocus || !inputFocus)"
  },
  {
    // search in current file
    "key": "space s l",
    "command": "actions.find",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // replace in current file
    "key": "space r l",
    "command": "editor.action.startFindReplaceAction",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // open version control "goto git" panel
    "args": {
      "commands": [
        "workbench.view.scm",
        "workbench.scm.focus"
      ]
    },
    "command": "runCommands",
    "key": "space g g",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "editor.action.addSelectionToNextFindMatch",
    "key": "ctrl-n",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  // ----------------------------------
  // File Explorer
  // ----------------------------------
  {
    "command": "renameFile",
    "key": "r",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "filesExplorer.copy",
    "key": "c",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "filesExplorer.paste",
    "key": "p",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "filesExplorer.cut",
    "key": "x",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.newFile",
    "key": "a",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.newFolder",
    "key": "shift-a",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.openToSide",
    "key": "s",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    // TODO: key binding is wrong
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "explorer.openAndPassFocus",
        "workbench.action.closeOtherEditors"
      ]
    },
    "command": "runCommands",
    "key": "shift-s",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.openAndPassFocus",
    "key": "enter",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "command": "list.toggleExpand",
    "key": "enter",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus"
  },
  {
    // go to previous "buffer" i.e. most recently used editor tab
    // Mmnemonic: buffer -> previous
    "command": "workbench.action.openPreviousRecentlyUsedEditor",
    "key": "space b p",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // go to next buffer, i.e. towards newerly used editor tab
    // Mmnemonic: buffer -> next
    "command": "workbench.action.openNextRecentlyUsedEditor",
    "key": "space b n",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // shows open editor tabs in fuzzy finder
    "command": "workbench.action.showAllEditors",
    "key": "space f b",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // move tab to left (arrow key)
    "key": "shift+left",
    "command": "workbench.action.moveEditorLeftInGroup",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // move tab to left (vim style)
    // Mmnemonic: buffer -> h (hjkl)
    "key": "space b h",
    "command": "workbench.action.moveEditorLeftInGroup",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // move tab to right (arrow key)
    "key": "shift+right",
    "command": "workbench.action.moveEditorRightInGroup",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // move tab to right (vim style)
    // Mmnemonic: buffer -> l (hjkl)
    "key": "space b l",
    "command": "workbench.action.moveEditorRightInGroup",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // Keep editor open (don't reuse this editor if new file is opened)
    // Original keybinding: Ctrl+k Enter
    // Mmnemonic: buffer -> ... (?)
    "key": "space b enter",
    "command": "workbench.action.keepEditor",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  // Harpoon plugin bindings:
  {
    // Mmnemonic: harpoon -> add
    "key": "space h a",
    "command": "vscode-harpoon.addEditor",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // Mmnemonic: harpoon -> edit
    "key": "space h e",
    "command": "vscode-harpoon.editEditors",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // Mmnemonic: harpoon -> find (analog to file find)
    "key": "space h f",
    "command": "vscode-harpoon.editorQuickPick",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    // Mmnemonic: harpoon -> previous
    "key": "space h p",
    "command": "vscode-harpoon.gotoPreviousHarpoonEditor",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space 1",
    "command": "vscode-harpoon.gotoEditor1",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space 2",
    "command": "vscode-harpoon.gotoEditor2",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space 3",
    "command": "vscode-harpoon.gotoEditor3",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space 4",
    "command": "vscode-harpoon.gotoEditor4",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  }

]